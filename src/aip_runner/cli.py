import sys
import json
import argparse
import textwrap
from pathlib import Path
from jsonschema import validate, ValidationError

# –ü—É—Ç—å –∫ —Å—Ö–µ–º–µ —Ä—è–¥–æ–º —Å –∫–æ–¥–æ–º –ø–∞–∫–µ—Ç–∞
BASE = Path(__file__).resolve().parent
SCHEMA_PATH = BASE / "schema" / "aip.schema.json"

def load_json(path: Path) -> dict:
    try:
        return json.loads(path.read_text(encoding="utf-8"))
    except FileNotFoundError:
        sys.exit(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")
    except json.JSONDecodeError as e:
        sys.exit(f"–û—à–∏–±–∫–∞ JSON –≤ {path}: {e}")

def do_validate(manifest_path: Path) -> None:
    manifest = load_json(manifest_path)
    schema = load_json(SCHEMA_PATH)
    try:
        validate(instance=manifest, schema=schema)
    except ValidationError as e:
        sys.exit(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞:\n{e}\n")
    print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞: OK")

def do_run(manifest_path: Path) -> None:
    manifest = load_json(manifest_path)
    schema = load_json(SCHEMA_PATH)
    try:
        validate(instance=manifest, schema=schema)
    except ValidationError as e:
        sys.exit(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞:\n{e}\n")
    print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞: OK\n")

    project = manifest.get("project", {}).get("name", "AIP Scenario")
    print(f"üöÄ –°—Ü–µ–Ω–∞—Ä–∏–π ¬´{project}¬ª\n")

    steps = manifest.get("workflow", {}).get("steps", [])
    if not steps:
        print("‚ö†Ô∏è –í –º–∞–Ω–∏—Ñ–µ—Å—Ç–µ –Ω–µ—Ç —à–∞–≥–æ–≤ workflow.")
        return

    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–æ–≥–æ–Ω –±–µ–∑ LLM
    agents = {a["id"]: a for a in manifest.get("agents", [])}
    context = ""
    for i, step in enumerate(steps, start=1):
        agent_id = step["agent"]
        agent = agents.get(agent_id)
        if not agent:
            sys.exit(f"–®–∞–≥ {i}: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≥–µ–Ω—Ç id='{agent_id}'")
        task = step["task"]
        print(f"‚Äî –®–∞–≥ {i}: {agent['name']} ‚Üí {task}")
        demo_answer = f"[demo] –û—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞ {agent['name']} –Ω–∞ –∑–∞–¥–∞—á—É: {task}"
        print(textwrap.indent(demo_answer, "   "))
        context += f"\n\n### {agent['name']} RESPONSE\n{demo_answer}"

    print("\nüéâ –ì–æ—Ç–æ–≤–æ.")

def main():
    parser = argparse.ArgumentParser(prog="aip-runner", description="AIP CLI (minimal)")
    sub = parser.add_subparsers(dest="cmd", required=True)

    pv = sub.add_parser("validate", help="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–∞–Ω–∏—Ñ–µ—Å—Ç")
    pv.add_argument("manifest", help="–ü—É—Ç—å –∫ AIP JSON")

    pr = sub.add_parser("run", help="–í—ã–ø–æ–ª–Ω–∏—Ç—å workflow (–¥–µ–º–æ)")
    pr.add_argument("manifest", help="–ü—É—Ç—å –∫ AIP JSON")

    args = parser.parse_args()
    manifest_path = Path(getattr(args, "manifest", ""))

    if args.cmd == "validate":
        do_validate(manifest_path)
    elif args.cmd == "run":
        do_run(manifest_path)
    else:
        parser.print_help()

if __name__ == "__main__":
    main()
