name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate-and-demo:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install deps (and package if available)
        run: |
          set -e
          python -m pip install --upgrade pip
          pip install jsonschema
          if [ -f "pyproject.toml" ]; then
            echo "pyproject.toml found → installing package (editable)"
            pip install -e .
          else
            echo "pyproject.toml not found → will use 'python src/aip_runner/cli.py'"
          fi

      # Основной пример: допускаем английскую или русскую папку
      - name: Detect manifest path (main example)
        id: manifest
        run: |
          set -e
          if [ -f "examples/article_pipeline.aip.json" ]; then
            echo "manifest=examples/article_pipeline.aip.json" >> "$GITHUB_OUTPUT"
            echo "Using manifest: examples/article_pipeline.aip.json"
          elif [ -f "примеры/article_pipeline.aip.json" ]; then
            echo "manifest=примеры/article_pipeline.aip.json" >> "$GITHUB_OUTPUT"
            echo "Using manifest: примеры/article_pipeline.aip.json"
          else
            echo "::error::Main example not found. Expected 'examples/article_pipeline.aip.json' or 'примеры/article_pipeline.aip.json'."
            exit 1
          fi

      - name: Detect CLI entrypoint
        id: cli
        run: |
          set -e
          if command -v aip-runner >/dev/null 2>&1; then
            echo "cli=aip-runner" >> "$GITHUB_OUTPUT"
            echo "CLI: aip-runner"
          else
            echo "cli=python src/aip_runner/cli.py" >> "$GITHUB_OUTPUT"
            echo "CLI: python src/aip_runner/cli.py"
          fi

      - name: Validate manifest
        run: ${{ steps.cli.outputs.cli }} validate "${{ steps.manifest.outputs.manifest }}"

      - name: Demo run (no LLM)
        run: ${{ steps.cli.outputs.cli }} run "${{ steps.manifest.outputs.manifest }}"

      # ---- i18n (RU) дымовой тест — опционально, не критично ----
      - name: Validate manifest (ru)
        run: ${{ steps.cli.outputs.cli }} --lang ru validate "${{ steps.manifest.outputs.manifest }}"

      - name: Demo run (ru, no LLM)
        run: ${{ steps.cli.outputs.cli }} --lang ru run "${{ steps.manifest.outputs.manifest }}"

      # ---- Artifacts check: используем отдельный манифест, если он есть ----
      - name: Validate manifest (artifacts demo)
        if: ${{ hashFiles('examples/article_with_artifacts.aip.json') != '' }}
        run: ${{ steps.cli.outputs.cli }} validate examples/article_with_artifacts.aip.json

      - name: Clean artifacts dir
        if: ${{ hashFiles('examples/article_with_artifacts.aip.json') != '' }}
        run: rm -rf artifacts || true

      - name: Demo run (with artifacts)
        if: ${{ hashFiles('examples/article_with_artifacts.aip.json') != '' }}
        run: ${{ steps.cli.outputs.cli }} run examples/article_with_artifacts.aip.json

      - name: Check artifact exists
        if: ${{ hashFiles('examples/article_with_artifacts.aip.json') != '' }}
        run: |
          set -e
          test -f artifacts/article.txt || (echo "::error::artifacts/article.txt not found"; ls -la artifacts || true; exit 1)
          echo "OK: artifacts/article.txt created"

      # ---- MCP demo: валидируем и запускаем пример, если файл есть ----
      - name: Validate manifest (MCP demo)
        if: ${{ hashFiles('examples/mcp_read.aip.json') != '' }}
        run: ${{ steps.cli.outputs.cli }} validate examples/mcp_read.aip.json

      - name: Demo run (MCP demo, no real MCP)
        if: ${{ hashFiles('examples/mcp_read.aip.json') != '' }}
        run: ${{ steps.cli.outputs.cli }} run examples/mcp_read.aip.json

      - name: Demo run (MCP demo with env config)
        if: ${{ hashFiles('examples/mcp_read.aip.json') != '' }}
        env:
          AIP_MCP_SERVERS: '{"filesystem":{"cmd":"mcp-filesystem --root ./","transport":"stdio"}}'
        run: ${{ steps.cli.outputs.cli }} --mcp run examples/mcp_read.aip.json
